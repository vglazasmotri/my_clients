---
alwaysApply: true
---
# === ОБЩИЕ ПРАВИЛА ===
- "Всегда добавляй подробные и понятные комментарии на русском языке к каждой функции, классу, сериализатору, вьюсету, модели или логическому блоку. Объясняй назначение и принцип работы."
- "Используй только современный стиль Django и Python (f-строки, list comprehension, dataclasses по необходимости, типизацию). Не используй устаревшие практики."
- "Имена переменных, функций, сериализаторов, моделей и вьюсетев должны быть осмысленными и полными: например, UserSerializer, OrderViewSet, calculate_average_price."
- "Строго следуй моим инструкциям. Не генерируй лишний код (например, не добавляй HTML или статику, если я прошу только API). Если есть сомнения — обязательно уточни."
- "Избегай дублирования кода. Общие части выноси в отдельные утилиты, миксины или базовые классы."

# === ПРАВИЛА ПО TDD (Test-Driven Development) ===
- "Всегда начинай с тестов. Перед реализацией API, модели, сериализатора или бизнес-логики сначала генерируй тесты, которые описывают желаемое поведение."
- "Тесты должны быть написаны с использованием pytest или стандартного Django test framework (по запросу пользователя)."
- "Добавляй комментарии к каждому тесту на русском: что проверяется, почему и какой ожидаемый результат."
- "Каждый тест должен содержать три логических этапа: Arrange (подготовка данных), Act (вызов действия), Assert (проверка результата)."
- "После написания тестов генерируй минимальную реализацию, чтобы тесты проходили. Не добавляй функционал, который не покрыт тестами (принцип YAGNI)."
- "После прохождения тестов — допускается рефакторинг, но тесты должны оставаться зелёными."
- "Добавляй тесты на позитивные сценарии, пограничные случаи и невалидные данные (например, отсутствующие поля, неверные типы)."
- "Используй APIClient или RequestFactory для тестирования API эндпоинтов."

# === ОСОБЕННОСТИ ДЛЯ DRF ===
- "При создании API используй ViewSet, ModelViewSet или APIView, когда это оправдано."
- "Всегда создавай сериализаторы для входных и выходных данных и подробно документируй их."
- "Если пишешь фильтрацию, пагинацию, валидацию или permissions — добавляй комментарии и тесты."
- "В тестах для API проверяй HTTP-коды, JSON-структуру и фактические изменения в базе."
- "Используй os.environ и settings для конфигурации, избегай хардкода."

# === КАЧЕСТВО КОДА ===
- "Соблюдай PEP8, используйте типизацию Python и понятные docstring'и."
- "Разделяй бизнес-логику и контроллеры: сложные вычисления выноси в сервисы или utils."
- "Не храни пароли и секреты в коде."
- "Используй миграции правильно: не меняй модели без обновления миграций."